import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";
import convex from "@/lib/convexClient";
import { client } from "@/lib/schematic";
import { createAgent, createTool } from "@inngest/agent-kit";
import { z } from "zod";
import { GoogleGenerativeAI } from "@google/generative-ai";

const geminiApiKey = process.env.GEMINI_API_KEY;
if (!geminiApiKey) {
    throw new Error("GEMINI_API_KEY is not set in environment variables");
}
const genAI = new GoogleGenerativeAI(geminiApiKey);

const saveToDatabaseTool = {
    name: "save-to-database",
    description: "Saves the given data to the convex database. If receiptSummary is missing, generates it using Gemini.",
    parameters: {
        type: "object",
        properties: {
            fileDisplayName: { type: "string", description: "The readable display name of the receipt to show in the UI. If the file name is not human readable, use this to give it a more readable name." },
            receiptId: { type: "string", description: "The ID of the receipt to update." },
            merchantName: { type: "string" },
            merchantAddress: { type: "string" },
            merchantContact: { type: "string" },
            transactionDate: { type: "string" },
            transactionAmount: { type: "string", description: "The total amount of the transaction, summing all the items on the receipt." },
            receiptSummary: { type: "string", description: "A summary of the receipt, including the merchant name, address, contact, transaction date, transaction amount, and currency. If not provided, it will be generated by Gemini.", nullable: true },
            currency: { type: "string" },
            items: {
                type: "array",
                description: "An array of items on the receipt. Include the name, quantity, unit price, and total price for each item.",
                items: {
                    type: "object",
                    properties: {
                        name: { type: "string" },
                        quantity: { type: "number" },
                        unitPrice: { type: "number" },
                        totalPrice: { type: "number" },
                    },
                    required: ["name", "quantity", "unitPrice", "totalPrice"]
                }
            }
        },
        required: [
            "fileDisplayName", "receiptId", "merchantName", "merchantAddress",
            "merchantContact", "transactionDate", "transactionAmount", "currency", "items"
        ]
    },
    handler: async (params: any, context: any) => {
        let {
            fileDisplayName,
            receiptId,
            merchantName,
            merchantAddress,
            merchantContact,
            transactionDate,
            transactionAmount,
            receiptSummary,
            currency,
            items,
        } = params;

        // If receiptSummary is missing or empty, generate it using Gemini
        if (!receiptSummary || receiptSummary.trim() === "") {
            const model = genAI.getGenerativeModel({ model: 'gemini-2.5-pro' });
            const prompt = `Generate a human-readable summary for the following receipt:\nMerchant: ${merchantName}, Address: ${merchantAddress}, Contact: ${merchantContact}\nDate: ${transactionDate}, Amount: ${transactionAmount} ${currency}\nItems: ${items.map((item: any) => `${item.quantity}x ${item.name} @ ${item.unitPrice} = ${item.totalPrice}`).join(", ")}`;
            try {
                const result = await model.generateContent({
                    contents: [
                        {
                            role: "user",
                            parts: [
                                { text: prompt }
                            ]
                        }
                    ]
                });
                const geminiResponse = await result.response;
                receiptSummary = await geminiResponse.text();
            } catch (error) {
                // If Gemini fails, fallback to a basic summary
                receiptSummary = `Receipt from ${merchantName} on ${transactionDate} for ${transactionAmount} ${currency}.`;
            }
        }

        const result = await context.step?.run(
            "save-receipt-to-database",
            async () => {
                try {
                    // Call the Convex mutation to update the receipt with extracted data
                    const {userId} = await convex.mutation(
                        api.receipts.updateReceiptWithExtractedData,
                        {
                            id: receiptId as Id<"receipts">,
                            fileDisplayName,
                            merchantName,
                            merchantContact,
                            merchantAddress,
                            transactionDate,
                            transactionAmount,
                            receiptSummary,
                            currency,
                            items,
                        },
                    );

                    // Track event in schematic
                    await client.track({
                        event: "scan",
                        company: {
                            id: userId,
                        },
                        user: {
                            id: userId,
                        }
                    });

                    return {
                        addedToDb: "Success",
                        receiptId,
                        fileDisplayName,
                        merchantAddress,
                        merchantContact,
                        merchantName,
                        transactionDate,
                        transactionAmount,
                        receiptSummary,
                        currency,
                        items,
                    };

                } catch (error) {
                    return{
                        addedToDb: "Failed",
                        error: error instanceof Error ? error.message : "Unknown error",
                    };
                }
            },
        );

        if(result?.addedToDb === "Success"){
            context.network?.state.kv.set("saved-to-database", true);
            context.network?.state.kv.set("receipt", receiptId);
        }
        return result;
    }
};

export const databaseAgent = createAgent({
    name: "Database Agent",
    description:
        "responsible for taking any key information regarding receipts and saving it to the convex database.",
    system:
        "You are a helpful assistant that takes key information regarding receipts and saves it to the convex database.",
    tools: [saveToDatabaseTool],
    model: require("@inngest/agent-kit").gemini({
        model: "gemini-2.5-pro",
        apiKey: process.env.GEMINI_API_KEY,
    }),
});
