import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";
import convex from "@/lib/convexClient";
import { client } from "@/lib/schematic";
import { createAgent, createTool } from "@inngest/agent-kit";
import { z } from "zod";
import { GoogleGenerativeAI, FunctionDeclaration, FunctionDeclarationsTool, SchemaType, Schema } from "@google/generative-ai";

const stringSchema: Schema = { type: SchemaType.STRING };
const numberSchema: Schema = { type: SchemaType.NUMBER };

export async function saveToDatabaseWithGemini(receiptData: {
    fileDisplayName: string;
    receiptId: string;
    merchantName: string;
    merchantAddress: string;
    merchantContact: string;
    transactionDate: string;
    transactionAmount: string;
    receiptSummary?: string;
    currency: string;
    items: Array<{
        name: string;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
    }>;
}) {
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
        throw new Error("GEMINI_API_KEY is not set in environment variables");
    }
    const genAI = new GoogleGenerativeAI(geminiApiKey);
    const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

    const saveToDatabaseFunctionDeclaration: FunctionDeclaration = {
        name: "save-to-database",
        description: "Saves the given data to the convex database. If receiptSummary is missing, generates it using Gemini.",
        parameters: {
            type: SchemaType.OBJECT,
            properties: {
                fileDisplayName: { ...stringSchema, description: "The readable display name of the receipt to show in the UI. If the file name is not human readable, use this to give it a more readable name." },
                receiptId: { ...stringSchema, description: "The ID of the receipt to update." },
                merchantName: stringSchema,
                merchantAddress: stringSchema,
                merchantContact: stringSchema,
                transactionDate: stringSchema,
                transactionAmount: { ...stringSchema, description: "The total amount of the transaction, summing all the items on the receipt." },
                receiptSummary: { ...stringSchema, description: "A summary of the receipt, including the merchant name, address, contact, transaction date, transaction amount, and currency. If not provided, it will be generated by Gemini.", nullable: true },
                currency: stringSchema,
                items: {
                    type: SchemaType.ARRAY,
                    description: "An array of items on the receipt. Include the name, quantity, unit price, and total price for each item.",
                    items: {
                        type: SchemaType.OBJECT,
                        properties: {
                            name: stringSchema,
                            quantity: numberSchema,
                            unitPrice: numberSchema,
                            totalPrice: numberSchema,
                        },
                        required: ["name", "quantity", "unitPrice", "totalPrice"]
                    }
                }
            },
            required: [
                "fileDisplayName", "receiptId", "merchantName", "merchantAddress",
                "merchantContact", "transactionDate", "transactionAmount", "currency", "items"
            ]
        }
    };

    const saveToDatabaseTool: FunctionDeclarationsTool = {
        functionDeclarations: [saveToDatabaseFunctionDeclaration]
    };

    try {
        const result = await model.generateContent({
            contents: [
                {
                    role: "user",
                    parts: [
                        { text: "Save this receipt data to the database." },
                        { inlineData: { mimeType: "application/json", data: Buffer.from(JSON.stringify(receiptData)).toString("base64") } }
                    ]
                }
            ],
            tools: [saveToDatabaseTool]
        });
        const response = await result.response;
        const functionCall = response.functionCall && response.functionCall();
        if (functionCall && functionCall.name === "save-to-database") {
            // Actually save to Convex DB
            try {
                const args = functionCall.args as {
                    receiptId: string;
                    fileDisplayName: string;
                    merchantName: string;
                    merchantAddress: string;
                    merchantContact: string;
                    transactionDate: string;
                    transactionAmount: string;
                    currency: string;
                    receiptSummary?: string;
                    items: Array<{
                        name: string;
                        quantity: number;
                        unitPrice: number;
                        totalPrice: number;
                    }>;
                };
                const updateResult = await convex.mutation(api.receipts.updateReceiptWithExtractedData, {
                    id: args.receiptId as Id<"receipts">,
                    fileDisplayName: args.fileDisplayName,
                    merchantName: args.merchantName,
                    merchantAddress: args.merchantAddress,
                    merchantContact: args.merchantContact,
                    transactionDate: args.transactionDate,
                    transactionAmount: args.transactionAmount,
                    currency: args.currency,
                    receiptSummary: args.receiptSummary || "",
                    items: args.items,
                });
                return { success: true, data: updateResult };
            } catch (dbErr) {
                console.error("Convex DB update error:", dbErr);
                return { success: false, message: "Failed to update receipt in database." };
            }
        } else {
            console.error("No function call detected or unexpected function:", response.text());
            return { success: false, message: response.text() || "Could not save data." };
        }
    } catch (error: any) {
        console.error("Gemini API Error:", error.message, error.details);
        return { error: error.message || "Failed to process receipt data." };
    }
}
